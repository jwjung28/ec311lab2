// -----------------------------------------------------------------------------
// tb_debouncer.v  (Vivado 2024/xsim-friendly)
// - Only signals on the waveform: clk, reset, button_in, button_out
// - Clock period = 6 (toggle every 3)
// - Multiple falling edges on reset to prove async negedge reset behavior
// - Generates quick "bounce" followed by a sustained press
// -----------------------------------------------------------------------------
`timescale 1ns/1ps
module tb_debouncer;
    // --- Waveform-visible signals ---
    reg  clk        = 1'b0;
    reg  reset      = 1'b1;   // start deasserted (active-low)
    reg  button_in  = 1'b0;
    wire button_out;

    // Clock: period = 6 (toggle every 3)
    localparam int HALF = 3;
    always #(HALF) clk = ~clk;

    // DUT
    debouncer #(.DEBOUNCE_MAX(4)) dut (
        .clk(clk),
        .reset(reset),
        .button_in(button_in),
        .button_out(button_out)
    );

    // Reset pulses: several falling edges at different times
    initial begin
        // brief start-up
        #2  reset = 1'b0;  // 1st falling edge (async clear)
        #6  reset = 1'b1;

        #40 reset = 1'b0;  // 2nd falling edge
        #6  reset = 1'b1;

        #80 reset = 1'b0;  // 3rd falling edge
        #6  reset = 1'b1;
    end

    // Button stimulus: quick bounce, sustained press, release; repeat around resets
    initial begin
        // Wait until first reset cycle completes
        #20;

        // Simulated contact bounce (too short to pass debounce)
        button_in = 1; #6;  // 1 clock
        button_in = 0; #6;  // release
        button_in = 1; #6;  // 1 clock
        button_in = 0; #12; // settle

        // Sustained press long enough to pass debounce and emit 1-cycle pulse
        button_in = 1; #(6*6); // 6 clocks (>= DEBOUNCE_MAX)
        button_in = 0; #24;

        // Another sustained press, this time straddling a reset pulse window
        button_in = 1; #12;
        // A reset falling edge will come later; keep holding
        #(6*6);
        button_in = 0; #24;

        // Final quick press that is too short (should NOT pulse)
        button_in = 1; #9;  // not an integer number of clocks; < DEBOUNCE_MAX high cycles
        button_in = 0; #30;

        // End sim
        #60 $finish;
    end
endmodule
