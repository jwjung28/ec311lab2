// -----------------------------------------------------------------------------
// tb_debouncer.v  (Vivado 2024 / xsim friendly)
// - Only waveform signals: clk, reset, button_in, button_out
// - Clock period = 6 (toggle every 3)
// - Multiple falling edges on reset to show async clear
// - Includes short "bounce" (no pulse) and sustained press (pulse)
// -----------------------------------------------------------------------------
`timescale 1ns/1ps
module tb_debouncer;

    // Waveform-visible signals
    reg  clk       = 1'b0;
    reg  reset     = 1'b1;   // active-low; start deasserted then pulse low
    reg  button_in = 1'b0;
    wire button_out;

    // 6-unit clock period (toggle every 3)
    always #3 clk = ~clk;

    // DUT
    debouncer #(
        .CNT_W(8),
        .DEBOUNCE_MAX(4)   // small for sim; requires 4 clocks high
    ) dut (
        .clk(clk),
        .reset(reset),
        .button_in(button_in),
        .button_out(button_out)
    );

    // Generate several falling-edge resets
    initial begin
        // 1st falling edge (async reset)
        #2  reset = 1'b0;
        #6  reset = 1'b1;

        // 2nd falling edge
        #40 reset = 1'b0;
        #6  reset = 1'b1;

        // 3rd falling edge
        #80 reset = 1'b0;
        #6  reset = 1'b1;
    end

    // Button stimulus
    initial begin
        // Wait a bit after first reset
        #20;

        // Quick "bounce" (too short, should NOT create a pulse)
        button_in = 1; #6;    // 1 clock high
        button_in = 0; #6;
        button_in = 1; #6;    // another short blip
        button_in = 0; #12;

        // Sustained press (>= DEBOUNCE_MAX clocks) -> expect 1 pulse
        button_in = 1; #(6*6);   // 6 clocks high
        button_in = 0; #24;

        // Hold across time where another reset will happen later
        button_in = 1; #12;
        #(6*6);
        button_in = 0; #24;

        // Final quick press (too short) -> no pulse
        button_in = 1; #9;    // < 4 clocks high
        button_in = 0; #30;

        #60 $finish;
    end

endmodule
