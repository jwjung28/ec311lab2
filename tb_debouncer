`timescale 1ns/1ps
module tb_debouncer_min;
  reg  clk = 0;
  reg  reset = 0;        // start held in reset (active-low)
  reg  button_in = 0;
  wire button_out;

  // Small MAX so you can see it quickly in sim
  debouncer #(.DEBOUNCE_MAX(6)) dut (
    .clk(clk), .reset(reset), .button_in(button_in), .button_out(button_out)
  );

  // 100 MHz clock
  always #5 clk = ~clk;

  initial begin
    // release reset cleanly
    repeat (3) @(posedge clk);
    reset = 1;

    // brief noise (should NOT produce button_out)
    button_in = 1; @(posedge clk);
    button_in = 0; @(posedge clk);
    button_in = 1; @(posedge clk);
    button_in = 0; repeat (3) @(posedge clk);

    // clean press: hold high >= DEBOUNCE_MAX cycles -> expect ONE pulse on button_out
    button_in = 1; repeat (10) @(posedge clk);

    // clean release (button_out won’t pulse on release; it’s only on rising edge)
    button_in = 0; repeat (10) @(posedge clk);

    $finish;
  end
endmodule

