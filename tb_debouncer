`timescale 1ns/1ps
module tb_debouncer;
  reg  clk = 0;
  reg  reset = 1;       // active-low, deasserted at start
  reg  button_in = 0;
  wire button_out;

  // Use a small DEBOUNCE_MAX so you can see activity quickly in sim
  debouncer #(.DEBOUNCE_MAX(8)) dut (
    .clk(clk),
    .reset(reset),
    .button_in(button_in),
    .button_out(button_out)
  );

  // 100 MHz clock (10 ns period)
  always #5 clk = ~clk;

  initial begin
    // Make sure reset is actually sampled low at a falling edge
    @(negedge clk); reset = 0;     // assert
    @(negedge clk); reset = 1;     // release (all regs now known/0)

    // Idle a few cycles
    repeat (4) @(negedge clk);

    // Some short bounce (should NOT trigger)
    button_in = 1; @(negedge clk);
    button_in = 0; @(negedg_
