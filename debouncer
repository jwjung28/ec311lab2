`timescale 1ns/1ps
module debouncer #(
    parameter integer DEBOUNCE_MAX = 500_000   // # falling edges to confirm a change
)(
    input  wire clk,          // global clock
    input  wire reset,        // ACTIVE-LOW async reset
    input  wire button_in,    // raw button
    output reg  button_out    // 1-cycle pulse on debounced rising edge (negedge domain)
);
    reg btn_s1, btn_s2;       // 2-flop synchronizer
    reg stable;               // debounced level
    reg stable_d;             // delayed debounced level for edge detect
    reg [31:0] cnt;           // dwell counter

    always @(negedge clk or negedge reset) begin
        if (!reset) begin
            btn_s1     <= 1'b0;
            btn_s2     <= 1'b0;
            stable     <= 1'b0;
            stable_d   <= 1'b0;
            button_out <= 1'b0;
            cnt        <= 32'd0;
        end else begin
            // sync raw input
            btn_s1 <= button_in;
            btn_s2 <= btn_s1;

            // debounce: count while input != stable; accept at MAX then clear
            if (btn_s2 != stable) begin
                if (cnt >= (DEBOUNCE_MAX - 1)) begin
                    stable <= btn_s2;
                    cnt    <= 32'd0;
                end else begin
                    cnt <= cnt + 32'd1;
                end
            end else begin
                cnt <= 32'd0;
            end

            // one-cycle pulse on debounced rising edge
            stable_d <= stable;
            if ((stable == 1'b1) && (stable_d == 1'b0))
                button_out <= 1'b1;
            else
                button_out <= 1'b0;
        end
    end
endmodule
