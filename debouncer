`timescale 1ns / 1ps
module debouncer #(
    parameter integer DEBOUNCE_MAX = 500_000
)(
    input  wire clk,
    input  wire reset,       
    input  wire button_in,
    output reg  button_out   
);

    reg rst_s0 = 1'b1;  
    reg rst_s1 = 1'b1;
    always @(negedge clk) begin
        rst_s0 <= reset;   
        rst_s1 <= rst_s0;  
    end
    wire rst_fall = (rst_s1 == 1'b1) && (rst_s0 == 1'b0); 

    reg btn_sync1 = 1'b0, btn_sync2 = 1'b0;
    always @(negedge clk) begin
        if (rst_fall) begin
            btn_sync1 <= 1'b0;
            btn_sync2 <= 1'b0;
        end else begin
            btn_sync1 <= button_in;
            btn_sync2 <= btn_sync1;
        end
    end


    reg        debounced   = 1'b0;
    reg        debounced_d = 1'b0;
    reg [31:0] cnt         = 32'd0;

    localparam [31:0] DMAX_32 = (DEBOUNCE_MAX < 1) ? 32'd1 : DEBOUNCE_MAX;

    always @(negedge clk) begin
        if (rst_fall) begin
            debounced   <= 1'b0;
            debounced_d <= 1'b0;
            cnt         <= 32'd0;
            button_out  <= 1'b0;
        end else begin
            if (btn_sync2 ^ debounced) begin
                if (cnt >= (DMAX_32 - 1)) begin
                    debounced <= btn_sync2;  // accept new level after threshold
                    cnt       <= 32'd0;
                end else begin
                    cnt <= cnt + 32'd1;
                end
            end else begin
                cnt <= 32'd0;
            end

            debounced_d <= debounced;
            button_out  <= debounced & ~debounced_d;  
        end
    end
endmodule
