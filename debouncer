`timescale 1ns / 1ps
module debouncer #(
    parameter integer DEBOUNCE_MAX = 500_000  
)(
    input  wire clk,
    input  wire reset,       
    input  wire button_in,  
    output reg  button_out  
);
    reg btn_sync1, btn_sync2;
    always @(posedge clk or negedge reset) begin
        if (!reset) begin
            btn_sync1 <= 1'b0;
            btn_sync2 <= 1'b0;
        end else begin
            btn_sync1 <= button_in;
            btn_sync2 <= btn_sync1;
        end
    end


    reg        debounced; 
    reg [31:0] cnt;               

    always @(posedge clk or negedge reset) begin
        if (!reset) begin
            debounced <= 1'b0;  
            cnt       <= 32'd0;
        end else begin
            if (btn_sync2 ^ debounced) begin
                if (cnt == DEBOUNCE_MAX[31:0]) begin
                    debounced <= btn_sync2;  
                    cnt       <= 32'd0;      
                end else begin
                    cnt <= cnt + 32'd1; 
                end
            end else begin
                cnt <= 32'd0;  
            end
        end
    end
    reg debounced_d;
    always @(posedge clk or negedge reset) begin
        if (!reset) begin
            debounced_d <= 1'b0;
            button_out  <= 1'b0;
        end else begin
            debounced_d <= debounced;
            button_out  <= debounced & ~debounced_d; 
        end
    end
endmodule
