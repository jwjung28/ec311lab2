// -----------------------------------------------------------------------------
// clock_divider_1hz
// - Input:  100 MHz clock
// - Output: 1 Hz clock (50% duty cycle)
// - Reset:  active-low asynchronous
// -----------------------------------------------------------------------------
module clock_divider_1hz (
    input  wire clk,       // 100 MHz system clock
    input  wire reset_n,   // ACTIVE-LOW async reset
    output reg  clk_1hz    // 1 Hz output clock
);
    localparam integer HALF = 50_000_000;      // 100 MHz รท 2 = 50 M cycles per half period
    localparam integer CTRW = $clog2(HALF);
    reg [CTRW-1:0] ctr;

    always @(posedge clk or negedge reset_n) begin
        if (!reset_n) begin
            ctr     <= {CTRW{1'b0}};
            clk_1hz <= 1'b0;
        end else begin
            if (ctr == HALF - 1) begin
                ctr     <= {CTRW{1'b0}};
                clk_1hz <= ~clk_1hz;           // toggle every half-period
            end else begin
                ctr <= ctr + 1'b1;
            end
        end
    end
endmodule
